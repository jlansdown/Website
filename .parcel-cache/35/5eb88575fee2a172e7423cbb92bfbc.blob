var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _phaser = require('phaser');
var _phaserDefault = _parcelHelpers.interopDefault(_phaser);
var _eventsEventsCenter = require('../events/EventsCenter');
var HealthState;
(function (HealthState) {
  HealthState[HealthState["IDLE"] = 0] = "IDLE";
  HealthState[HealthState["DAMAGE"] = 1] = "DAMAGE";
  HealthState[HealthState["DEAD"] = 2] = "DEAD";
})(HealthState || (HealthState = {}));
class Faune extends _phaserDefault.default.Physics.Arcade.Sprite {
  healthState = HealthState.IDLE;
  damageTime = 0;
  _health = 3;
  _coins = 0;
  get health() {
    return this._health;
  }
  constructor(scene, x, y, texture, frame) {
    super(scene, x, y, texture, frame);
    this.anims.play('faune-idle-down');
  }
  setKnives(knives) {
    this.knives = knives;
  }
  setChest(chest) {
    this.activeChest = chest;
  }
  handleDamage(dir) {
    if (this._health <= 0) {
      return;
    }
    if (this.healthState === HealthState.DAMAGE) {
      return;
    }
    --this._health;
    if (this._health <= 0) {
      // TODO: die
      this.healthState = HealthState.DEAD;
      this.anims.play('faune-faint');
      this.setVelocity(0, 0);
    } else {
      this.setVelocity(dir.x, dir.y);
      this.setTint(0xff0000);
      this.healthState = HealthState.DAMAGE;
      this.damageTime = 0;
    }
  }
  throwKnife() {
    if (!this.knives) {
      return;
    }
    const knife = this.knives.get(this.x, this.y, 'knife');
    if (!knife) {
      return;
    }
    const parts = this.anims.currentAnim.key.split('-');
    const direction = parts[2];
    const vec = new _phaserDefault.default.Math.Vector2(0, 0);
    switch (direction) {
      case 'up':
        vec.y = -1;
        break;
      case 'down':
        vec.y = 1;
        break;
      default:
      case 'side':
        if (this.scaleX < 0) {
          vec.x = -1;
        } else {
          vec.x = 1;
        }
        break;
    }
    const angle = vec.angle();
    knife.setActive(true);
    knife.setVisible(true);
    knife.setRotation(angle);
    knife.x += vec.x * 16;
    knife.y += vec.y * 16;
    knife.setVelocity(vec.x * 300, vec.y * 300);
  }
  preUpdate(t, dt) {
    super.preUpdate(t, dt);
    switch (this.healthState) {
      case HealthState.IDLE:
        break;
      case HealthState.DAMAGE:
        this.damageTime += dt;
        if (this.damageTime >= 250) {
          this.healthState = HealthState.IDLE;
          this.setTint(0xffffff);
          this.damageTime = 0;
        }
        break;
    }
  }
  update(cursors) {
    if (this.healthState === HealthState.DAMAGE || this.healthState === HealthState.DEAD) {
      return;
    }
    if (!cursors) {
      return;
    }
    if (_phaserDefault.default.Input.Keyboard.JustDown(cursors.space)) {
      if (this.activeChest) {
        const coins = this.activeChest.open();
        this._coins += coins;
        _eventsEventsCenter.sceneEvents.emit('player-coins-changed', this._coins);
      } else {
        this.throwKnife();
      }
      return;
    }
    const speed = 100;
    const leftDown = cursors.left?.isDown;
    const rightDown = cursors.right?.isDown;
    const upDown = cursors.up?.isDown;
    const downDown = cursors.down?.isDown;
    if (leftDown) {
      this.anims.play('faune-run-side', true);
      this.setVelocity(-speed, 0);
      this.scaleX = -1;
      this.body.offset.x = 24;
    } else if (rightDown) {
      this.anims.play('faune-run-side', true);
      this.setVelocity(speed, 0);
      this.scaleX = 1;
      this.body.offset.x = 8;
    } else if (upDown) {
      this.anims.play('faune-run-up', true);
      this.setVelocity(0, -speed);
    } else if (downDown) {
      this.anims.play('faune-run-down', true);
      this.setVelocity(0, speed);
    } else {
      const parts = this.anims.currentAnim.key.split('-');
      parts[1] = 'idle';
      this.anims.play(parts.join('-'));
      this.setVelocity(0, 0);
    }
    if (leftDown || rightDown || upDown || downDown) {
      this.activeChest = undefined;
    }
  }
}
exports.default = Faune;
_phaserDefault.default.GameObjects.GameObjectFactory.register('faune', function (x, y, texture, frame) {
  var sprite = new Faune(this.scene, x, y, texture, frame);
  this.displayList.add(sprite);
  this.updateList.add(sprite);
  this.scene.physics.world.enableBody(sprite, _phaserDefault.default.Physics.Arcade.DYNAMIC_BODY);
  sprite.body.setSize(sprite.width * 0.5, sprite.height * 0.8);
  return sprite;
});
